{"version":3,"file":"static/js/373.3fdf5e14.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/PhoneBook.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.search;\nexport const selectContactsList = state => state.contacts.items;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsList } from '../../redux/selectors';\nimport { addContact } from '../../redux/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n    const newContact = {name, number,};\n\n    if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts.`);\n    } \n    \n    else {\n      dispatch(addContact(newContact));\n    }\n\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder='Name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder='Number'\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\">\n        add contact\n      </button>\n    </form>\n  );\n};","import styled from \"styled-components\";\n\nexport const Item = styled.li`\ndisplay: flex;\nalign-items: center;\ngap: 8px;\n\nmargin: 40px 0px 16px 16px;\n\nbutton {\n    margin: 0px 0px 0px 16px;\n    padding: 0px;\n\n    width: 20px;\n    height: 20px;\n\n    border-radius: 10px;\n\n    font-size: 12px;\n    align-items: center;\n}\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport { selectContactsList, selectFilter } from '../../redux/selectors';\nimport { useMemo } from 'react';\nimport { Item } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContactsList);\n\n  const filtredContacts = useMemo(() => {\n    if (!filter) {\n      return contacts;\n    } else {\n      return contacts.filter(contacts =>\n        contacts.name.toLowerCase().includes(filter.toLowerCase().trim())\n      )\n    }\n  }, [contacts, filter]);\n\n  return (\n      <ul>\n        {filtredContacts.map(({ name, number, id }) => (\n          <Item key={id}>\n            <p><b>{name}</b> <span>{number}</span></p>\n\n            <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              x\n            </button>\n          </Item>\n        ))}\n      </ul>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/slice/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <div>\n      <label>\n        <input\n          type=\"text\"\n          placeholder='Find contacts by name'\n          value={filter}\n          onChange={showFilteredContacts}\n        />\n      </label>\n    </div>\n  );\n};","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts } from 'redux/operations';\n\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { Filter } from '../components/Filter/Filter';\n\nconst  PhoneBook = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm/>\n\n        <div>\n          <h2>Contacts</h2>\n          \n          <Filter />\n          <ContactsList />\n        </div>\n    </>\n  );\n}\n\nexport default PhoneBook;"],"names":["selectFilter","state","filter","search","selectContactsList","contacts","items","ContactForm","dispatch","useDispatch","useSelector","_jsxs","onSubmit","e","preventDefault","name","target","elements","value","number","newContact","find","contact","alert","concat","addContact","reset","children","_jsx","type","placeholder","pattern","title","required","Item","styled","_templateObject","_taggedTemplateLiteral","ContactsList","filtredContacts","useMemo","toLowerCase","includes","trim","map","_ref","id","onClick","deleteContact","Filter","onChange","filterContacts","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}